import React, { useState, useRef, useEffect } from 'react';
import './ChallengeDetail.css';

const ChallengeDetail = ({ challengeDetailsItem, id, username }) => {
  const [activeTaskIndex, setActiveTaskIndex] = useState(0); // Start with the first task active
  const [completedTasks, setCompletedTasks] = useState([]); // Keep track of completed tasks
  const [animationProgress, setAnimationProgress] = useState({}); // Track progress of animations

  // Refs to manage slider elements for each task
  const sliderTrackRefs = useRef([]);
  const sliderFillRefs = useRef([]);
  const sliderGlowRefs = useRef([]);
  const sliderThumbRefs = useRef([]);
  const isDragging = useRef([]);
  const animatingTasksRefs = useRef({}); // Store interval IDs for animations
  const completeTask = async (index) => {
    // Mark task as completed
    setCompletedTasks((prev) => [...prev, index]);
    setActiveTaskIndex(index + 1);
  
    // Perform API call to save user progress
    try {
      console.log(id+ "details " +challengeDetailsItem.title + "  username" +username)
         const response = await fetch('https://d5daginsfb4svds4mjjs.apigw.yandexcloud.net/event', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: id?id:"zero",
          event_name: itemTask.taskName ,
          event_id: "", // Updated to include task index
          status: 'completed',
          user_wallet: '123',
          username: username?username:"EMPTY",
        }),
      });

      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
  
      const data = await response.json();
      console.log('Progress saved:', data);
  
    } catch (error) {
      console.error('API call error:', error);
    }
  };
  
  const startAnimation = (index) => {
    const totalDuration = 5000; // Total animation duration in ms (5 seconds)
    const startTime = Date.now();
    const intervalDuration = 50; // Update every 50ms
  
    const intervalId = setInterval(() => {
      const elapsed = Date.now() - startTime;
      if (elapsed >= totalDuration) {
        clearInterval(intervalId);
        delete animatingTasksRefs.current[index];
  
        // Remove animation progress
        setAnimationProgress((prev) => {
          const newProgressState = { ...prev };
          delete newProgressState[index];
          return newProgressState;
        });
  
        // Mark task as completed and save progress
        completeTask(index); // Move completeTask(index); here
  
      } else {
        // Calculate progress for the current elapsed time
        const cycles = 2;
        const cycleDuration = totalDuration / cycles;
        const timeInCycle = elapsed % cycleDuration;
  
        let progress;
  
        if (timeInCycle <= cycleDuration / 2) {
          // First half of the cycle: fill from right to left
          progress = 100 - (timeInCycle / (cycleDuration / 2)) * 100;
        } else {
          // Second half: fill from left to right
          progress = ((timeInCycle - cycleDuration / 2) / (cycleDuration / 2)) * 100;
        }
  
        setAnimationProgress((prevProgress) => ({
          ...prevProgress,
          [index]: progress,
        }));
      }
    }, intervalDuration);
  
    // Store intervalId
    animatingTasksRefs.current[index] = intervalId;
    // Remove completeTask(index); from here
  };
  

  // Cleanup intervals on component unmount
  useEffect(() => {
    return () => {
      Object.values(animatingTasksRefs.current).forEach((intervalId) => {
        clearInterval(intervalId);
      });
    };
  }, []);

  // Mouse and touch event handlers
  const handleMouseDown = (e, index) => {
    if (index !== activeTaskIndex || animatingTasksRefs.current[index]) return;
    e.preventDefault();
    isDragging.current[index] = true;
    document.body.style.userSelect = 'none'; // Prevent text selection
  };

  const handleMouseUp = (e, index) => {
    if (index !== activeTaskIndex) return;
    e.preventDefault();
    isDragging.current[index] = false;
    document.body.style.userSelect = 'auto';
  };

  const handleMouseMove = (e, index) => {
    if (!isDragging.current[index] || animatingTasksRefs.current[index]) return;
    if (index !== activeTaskIndex) return;

    const sliderTrack = sliderTrackRefs.current[index];
    const sliderFill = sliderFillRefs.current[index];
    const sliderGlow = sliderGlowRefs.current[index];
    const sliderThumb = sliderThumbRefs.current[index];

    const trackRect = sliderTrack.getBoundingClientRect();
    let offsetX = e.clientX - trackRect.left;

    // Constrain within the track
    if (offsetX < 0) offsetX = 0;
    if (offsetX > trackRect.width) offsetX = trackRect.width;

    const percent = (offsetX / trackRect.width) * 100;

    // Update styles
    sliderThumb.style.left = `${percent}%`;
    sliderFill.style.width = `${percent}%`;
    sliderFill.style.left = '0%';
    sliderGlow.style.left = `${percent}%`;
    sliderGlow.style.width = `${100 - percent}%`;

    if (percent >= 100 && !completedTasks.includes(index)) {
      const itemTask = challengeDetailsItem.tasks[index];
      if (itemTask.type === 'breaf') {
        if (!animatingTasksRefs.current[index]) {
          startAnimation(index);
          // Do not call completeTask(index); here
        }
      } else {
        // Mark task as completed and save progress
        completeTask(index);
      }
    }
    
    
  };

  const handleTouchStart = (e, index) => {
    if (index !== activeTaskIndex || animatingTasksRefs.current[index]) return;
    e.preventDefault();
    isDragging.current[index] = true;
    document.body.style.userSelect = 'none';
  };

  const handleTouchEnd = (e, index) => {
    if (index !== activeTaskIndex) return;
    e.preventDefault();
    isDragging.current[index] = false;
    document.body.style.userSelect = 'auto';
  };

  const handleTouchMove = (e, index) => {
    if (!isDragging.current[index] || animatingTasksRefs.current[index]) return;
    if (index !== activeTaskIndex) return;

    const touch = e.touches[0];
    const sliderTrack = sliderTrackRefs.current[index];
    const sliderFill = sliderFillRefs.current[index];
    const sliderGlow = sliderGlowRefs.current[index];
    const sliderThumb = sliderThumbRefs.current[index];

    const trackRect = sliderTrack.getBoundingClientRect();
    let offsetX = touch.clientX - trackRect.left;

    // Constrain within the track
    if (offsetX < 0) offsetX = 0;
    if (offsetX > trackRect.width) offsetX = trackRect.width;

    const percent = (offsetX / trackRect.width) * 100;

    // Update styles
    sliderThumb.style.left = `${percent}%`;
    sliderFill.style.width = `${percent}%`;
    sliderFill.style.left = '0%';
    sliderGlow.style.left = `${percent}%`;
    sliderGlow.style.width = `${100 - percent}%`;

    if (percent >= 100 && !completedTasks.includes(index)) {
      const itemTask = challengeDetailsItem.tasks[index];
      if (itemTask.type === 'breaf') {
        if (!animatingTasksRefs.current[index]) {
          startAnimation(index);
          // Remove completeTask(index); from here
        }
      } else {
        // Mark task as completed and save progress
        completeTask(index);
      }
    }
  };

  // Calculate challenge progress
  const totalTasks = challengeDetailsItem.tasks ? challengeDetailsItem.tasks.length : 0;
  const progressPercentage = totalTasks > 0 ? (completedTasks.length / totalTasks) * 100 : 0;

  return (
    <div className="challenge-detail">
      <div className="image-container">
        <img src={challengeDetailsItem.imageUrl} alt="Challenge!" className="challenge-image" />
        <div className="card-tag-details">{challengeDetailsItem.type}</div>
      </div>
      <p className="challenge-title-details">{challengeDetailsItem.title}</p>

      <p className="challenge-description">{challengeDetailsItem.description}</p>

      {/* Updated challenge progress bar */}
      <div className="challenge-progress">
        <div
          className="challenge-progress-filled"
          style={{
            backgroundColor: '#007AFF',
            height: '16px',
            width: `${progressPercentage}%`,
            transition: 'width 0.5s ease',
          }}
        ></div>
      </div>
      <h3 className="section-title">Задания</h3>

      <div className="tasks">
        {challengeDetailsItem.tasks && challengeDetailsItem.tasks.length > 0 ? (
          challengeDetailsItem.tasks.map((itemTask, index) =>
            itemTask ? (
              <div key={index} className="card-task">
                <div
                  className={`card-task-inner ${
                    index !== activeTaskIndex && !completedTasks.includes(index) ? 'disabled' : ''
                  }`}
                  ref={(el) => (sliderTrackRefs.current[index] = el)}
                  onMouseMove={(e) => handleMouseMove(e, index)}
                  onMouseUp={(e) => handleMouseUp(e, index)}
                  onMouseLeave={(e) => handleMouseUp(e, index)}
                  onTouchMove={(e) => handleTouchMove(e, index)}
                  onTouchEnd={(e) => handleTouchEnd(e, index)}
                >
                  {/* Only render the slider elements for the active task */}
                  {index === activeTaskIndex && (
                    <>
                      {animationProgress[index] != null ? (
                        // If animation is in progress, animate the slider-fill from right to left
                        <div
                          className="slider-fill"
                          ref={(el) => (sliderFillRefs.current[index] = el)}
                          style={{
                            width: `100%`,
                            left: `${animationProgress[index]}%`,
                          }}
                        ></div>
                      ) : (
                        // Otherwise, use normal slider-fill
                        <div
                          className="slider-fill"
                          ref={(el) => (sliderFillRefs.current[index] = el)}
                          style={{ left: '0%' }}
                        ></div>
                      )}
                      <div
                        className="slider-glow"
                        ref={(el) => (sliderGlowRefs.current[index] = el)}
                      ></div>
                      <div
                        className="slider-thumb"
                        ref={(el) => (sliderThumbRefs.current[index] = el)}
                        style={{
                          left:
                            animationProgress[index] != null
                              ? `${animationProgress[index]}%`
                              : '0%',
                        }}
                        onMouseDown={(e) => handleMouseDown(e, index)}
                        onTouchStart={(e) => handleTouchStart(e, index)}
                      ></div>
                    </>
                  )}

                  {/* Show the filled slider for completed tasks */}
                  {completedTasks.includes(index) && (
                    <>
                      <div
                        className="slider-fill completed"
                        style={{ width: '100%', left: '0%' }}
                      ></div>
                      <div
                        className="slider-thumb completed"
                      ></div>
                    </>
                  )}

                  <div className="card-icon-task">
                    <img src={itemTask.taskImgURL} alt="Challenge!" />
                  </div>
                  <div className="card-content-task">
                    <p className="card-title-task">{itemTask.taskName}</p>
                    <p className="card-subtitle-task">{itemTask.taskDescription}</p>
                  </div>
                </div>
              </div>
            ) : null
          )
        ) : (
          <p className="no-tasks-message">Скоро в приложении</p>
        )}
      </div>
    </div>
  );
};

export default ChallengeDetail;

/*
 * Copyright © 2024, Kirill Code.
 * Business Source License 1.1
 * Change Date: November 23, 2026
 */
